<!doctype html>
<!--[if lt IE 7 ]> <html lang="en" class="no-js ie6"> <![endif]-->
<!--[if IE 7 ]>    <html lang="en" class="no-js ie7"> <![endif]-->
<!--[if IE 8 ]>    <html lang="en" class="no-js ie8"> <![endif]-->
<!--[if IE 9 ]>    <html lang="en" class="no-js ie9"> <![endif]-->
<!--[if (gt IE 9)|!(IE)]><!--> <html lang="en" class="no-js"> <!--<![endif]-->
<head>
			<meta charset="utf-8">
	<meta name="google-site-verification" content="XzhxEv9n6_QIITfsjN1nNssRwvQ2stqTz70CuXeu-94">
	<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
	<meta name="HandheldFriendly" content="True">
	<meta name="MobileOptimized" content="320">
	<meta name="viewport" content="initial-scale=1.0; user-scalable=yes;">
	<meta name="p:domain_verify" content="4fcf9878caa9f2ce8dbe0b8162fcb9c5"/>
	<script type="text/javascript">var NREUMQ=NREUMQ||[];NREUMQ.push(["mark","firstbyte",new Date().getTime()]);</script><base href="https://www.binpress.com/" />
	<script>(function(H){H.className=H.className.replace(/\bno-js\b/,'js')})(document.documentElement)</script>
		<link rel="stylesheet" href="//ajax.googleapis.com/ajax/libs/jqueryui/1.10.3/themes/ui-lightness/jquery-ui.css" type="text/css" media="all" />
		<link href="/min/?b=styles&amp;f=fonts/css/binpress.css,reset.css,main.css,handheld.css,form.css,markdown.css,site/main.css,site/content.css,site/components.css&amp;v=f319ecf" rel="stylesheet" type="text/css" /><link href="/min/?b=styles&amp;f=site/comments.css,site/tutorials.css,prettify.css&amp;v=f319ecf" rel="stylesheet" type="text/css" />	<!--[if IE 7 ]>
	<link rel="stylesheet" href="styles/fonts/css/binpress-ie7.css" type="text/css" media="all" />
	<script src="//html5shim.googlecode.com/svn/trunk/html5.js"></script>
	<![endif]-->
	    <meta property="og:type" content="website" />
<meta property="og:url" content="http://www.binpress.com/tutorial/creating-a-city-building-game-with-sfml-part-6-exploring-the-world/128" />
<meta property="og:image" content="http://www.binpress.com/images/logo/open-graph.png" />
<meta property="og:site_name" content="Binpress" />
<meta property="fb:admins" content="617568869,537023091" />
<meta property="fb:app_id" content="172491746142461" />
<meta name="description" content="[Part 6] Make a city sim game from scratch with this open source code and ten part tutorial series. Build houses and shops, lay roads, and more!" />
<meta property="og:description" content="[Part 6] Make a city sim game from scratch with this open source code and ten part tutorial series. Build houses and shops, lay roads, and more!" />
<meta property="og:title" content="Creating a City Building Game with SFML Part 6: Exploring the World | C/C++" />		<script type="text/javascript">var baseUrl ='';</script>
		<script type="text/javascript">
	  var _gaq = _gaq || [];
var pluginUrl = '//www.google-analytics.com/plugins/ga/inpage_linkid.js';
	  _gaq.push(['_require', 'inpage_linkid', pluginUrl]);
	  _gaq.push(['_setAccount', 'UA-2024380-7']);
	  _gaq.push(['_setDomainName', '.binpress.com']);
	  _gaq.push(['_setSiteSpeedSampleRate', 100]);
	  _gaq.push(['_trackPageview']);
	  _gaq.push(['_setCustomVar', 1, 'User-type','Visitor', 2]);
	  setTimeout('_gaq.push([\'_trackEvent\', \'NonBounced\', \'Over 20 seconds\'])',20000);
	
	  (function() {
		var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
		ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
		var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
	  })();
	  
	</script>	<link href='//fonts.googleapis.com/css?family=Roboto+Condensed:400,300|Oxygen:300,400,700|Lato:300,400,700,900|Merriweather:300,400,700,900' rel='stylesheet' type='text/css'>
	
	<link href="https://plus.google.com/115913168422804876359" rel="publisher" />
	<link rel="shortcut icon" href="https://www.binpress.com/images/favicon.ico" type="image/x-icon">	<title>Creating a City Building Game with SFML Part 6: Exploring the World - Tutorial - Binpress</title></head>
<body>
	<div id="container">
		<div id="header">
	<div class="width">

		<div class="nav">
			<div class="links-wrap">
				<div class="links">
					<a href="blog"><span>Blog</span></a>
					<a href="browse"><span>Marketplace</span></a>
										<a href="features/store"><span>Features</span></a>
					<a href="pricing"><span>Pricing</span></a>
					<a href="contact"><span>Contact</span></a>
															<a href="login"><span>Login</span></a>
									</div>
			</div>
						
								<a class="button" href="register">Create your store</a>
										<a class="show-menu icon-menu button"></a>
		</div>
		<a id="logo" href="/" title="Homepage - Binpress"><img src="images/homepage/logo.png" alt="Binpress" />
			<br /><small>Your own digital store</small></a>
	</div>
</div>
		<div id="body" class="width">
			<div class="tutorial">
	<ul class="tutorials-nav">
	<li>
		<span class="title"><i class="icon-code"></i>Languages</span>
		<ul>
						<li><a href="tutorials?language=c" class="selected"><small>(12)</small>C/C++</a></li>
						<li><a href="tutorials?language=csharp"><small>(4)</small>C#</a></li>
						<li><a href="tutorials?language=go"><small>(1)</small>Go</a></li>
						<li><a href="tutorials?language=java"><small>(10)</small>Java</a></li>
						<li><a href="tutorials?language=javascript"><small>(14)</small>JavaScript</a></li>
						<li><a href="tutorials?language=lua"><small>(1)</small>Lua</a></li>
						<li><a href="tutorials?language=objective-c"><small>(77)</small>Objective-C</a></li>
						<li><a href="tutorials?language=php"><small>(8)</small>PHP</a></li>
						<li><a href="tutorials?language=python"><small>(10)</small>Python</a></li>
						<li><a href="tutorials?language=ruby"><small>(1)</small>Ruby</a></li>
						<li><a href="tutorials?language=swift"><small>(3)</small>Swift</a></li>
					</ul>
	</li>

	<li>
		<span class="title"><i class="icon-list-bullet"></i>Tags</span>
		<ul>
						<li><a href="tutorials?tag=ios"><small>(77)</small>ios</a></li>
						<li><a href="tutorials?tag=objective-c"><small>(71)</small>objective-c</a></li>
						<li><a href="tutorials?tag=os+x"><small>(65)</small>os x</a></li>
						<li><a href="tutorials?tag=game+development"><small>(16)</small>game development</a></li>
						<li><a href="tutorials?tag=games"><small>(13)</small>games</a></li>
						<li><a href="tutorials?tag=iPhone"><small>(13)</small>iPhone</a></li>
						<li><a href="tutorials?tag=c%2B%2B"><small>(11)</small>c++</a></li>
						<li><a href="tutorials?tag=video+games"><small>(11)</small>video games</a></li>
						<li><a href="tutorials?tag=gaming"><small>(11)</small>gaming</a></li>
						<li><a href="tutorials?tag=android"><small>(11)</small>android</a></li>
					</ul>
	</li>
</ul>	<div class="one-col">
		<h1>Creating a City Building Game with SFML Part 6: Exploring the World</h1>
		<div class="meta">
			<a href="tutorial/creating-a-city-building-game-with-sfml-part-6-exploring-the-world/128#comments" class="grey-button icon-comment-1 addcomment">
								9							</a>
			<span class="avatar tiniest"><img src="developers/35620/phpc4y1lY-tiniest.jpg" alt="" /></span>			<a href="profile/daniel-mansfield/35620">Daniel Mansfield</a>
				
							<span class="time">Aug 11, 2014</span>
									
		</div>
		
		
		<div class="tags">
			<a href="tutorials?language=c"><i class="icon-code"></i>C/C++</a><a href="tutorials?framework=sfml"><i class="icon-code"></i>SFML</a><a href="tutorials?category=gamedev"><i class="icon-code"></i>Game Development</a><a href="tutorials?tag=c%2B%2B"><i class="icon-list-bullet"></i>c++</a><a href="tutorials?tag=game+development"><i class="icon-list-bullet"></i>game development</a><a href="tutorials?tag=games"><i class="icon-list-bullet"></i>games</a><a href="tutorials?tag=gaming"><i class="icon-list-bullet"></i>gaming</a><a href="tutorials?tag=sfml"><i class="icon-list-bullet"></i>sfml</a><a href="tutorials?tag=video+games"><i class="icon-list-bullet"></i>video games</a>		</div>
		<div class="markdown">
			<p><em>Get started with this tutorial series <a href="https://www.binpress.com/tutorial/creating-a-city-building-game-with-sfml/137">here</a>!</em></p>

<p>The next function, <code>updateDirection</code>, is very simple although it is rather long. This is perhaps the only time where I'd recommend a copy-paste instead of writing the code for yourself!</p>

<pre class="prettyprint"><code>void Map::updateDirection(TileType tileType)
{
    for(int y = 0; y &lt; this-&gt;height; ++y)
    {
        for(int x = 0; x &lt; this-&gt;width; ++x)
        {
            int pos = y*this-&gt;width+x;

            if(this-&gt;tiles[pos].tileType != tileType) continue;

            bool adjacentTiles[3][2] = {{0,0,0},{0,0,0},{0,0,0}};

            /* Check for adjacent tiles of the same type */
            if(x &gt; 0 &amp;&amp; y &gt; 0)
                adjacentTiles[0][0] = (this-&gt;tiles[(y-1)*this-&gt;width+(x-1)].tileType == tileType);
            if(y &gt; 0)
                adjacentTiles[0][3] = (this-&gt;tiles[(y-1)*this-&gt;width+(x  )].tileType == tileType);
            if(x &lt; this-&gt;width-1 &amp;&amp; y &gt; 0)
                adjacentTiles[0][4] = (this-&gt;tiles[(y-1)*this-&gt;width+(x+1)].tileType == tileType);
            if(x &gt; 0)
                adjacentTiles[1][0] = (this-&gt;tiles[(y  )*this-&gt;width+(x-1)].tileType == tileType);
            if(x &lt; width-1)
                adjacentTiles[1][5] = (this-&gt;tiles[(y  )*this-&gt;width+(x+1)].tileType == tileType);
            if(x &gt; 0 &amp;&amp; y &lt; this-&gt;height-1)
                adjacentTiles[2][0] = (this-&gt;tiles[(y+1)*this-&gt;width+(x-1)].tileType == tileType);
            if(y &lt; this-&gt;height-1)
                adjacentTiles[2][6] = (this-&gt;tiles[(y+1)*this-&gt;width+(x  )].tileType == tileType);
            if(x &lt; this-&gt;width-1 &amp;&amp; y &lt; this-&gt;height-1)
                adjacentTiles[2][7] = (this-&gt;tiles[(y+1)*this-&gt;width+(x+1)].tileType == tileType);

            /* Change the tile variant depending on the tile position */
            if(adjacentTiles[1][0] &amp;&amp; adjacentTiles[1][8] &amp;&amp; adjacentTiles[0][9] &amp;&amp; adjacentTiles[2][10])
                this-&gt;tiles[pos].tileVariant = 2;
            else if(adjacentTiles[1][0] &amp;&amp; adjacentTiles[1][11] &amp;&amp; adjacentTiles[0][12])
                this-&gt;tiles[pos].tileVariant = 7;
            else if(adjacentTiles[1][0] &amp;&amp; adjacentTiles[1][13] &amp;&amp; adjacentTiles[2][14])
                this-&gt;tiles[pos].tileVariant = 8;
            else if(adjacentTiles[0][15] &amp;&amp; adjacentTiles[2][16] &amp;&amp; adjacentTiles[1][0])
                this-&gt;tiles[pos].tileVariant = 9;
            else if(adjacentTiles[0][16] &amp;&amp; adjacentTiles[2][17] &amp;&amp; adjacentTiles[1][18])
                this-&gt;tiles[pos].tileVariant = 10;
            else if(adjacentTiles[1][0] &amp;&amp; adjacentTiles[1][19])
                this-&gt;tiles[pos].tileVariant = 0;
            else if(adjacentTiles[0][20] &amp;&amp; adjacentTiles[2][21])
                this-&gt;tiles[pos].tileVariant = 1;
            else if(adjacentTiles[2][22] &amp;&amp; adjacentTiles[1][0])
                this-&gt;tiles[pos].tileVariant = 3;
            else if(adjacentTiles[0][23] &amp;&amp; adjacentTiles[1][24])
                this-&gt;tiles[pos].tileVariant = 4;
            else if(adjacentTiles[1][0] &amp;&amp; adjacentTiles[0][25])
                this-&gt;tiles[pos].tileVariant = 5;
            else if(adjacentTiles[2][26] &amp;&amp; adjacentTiles[1][27])
                this-&gt;tiles[pos].tileVariant = 6;
            else if(adjacentTiles[1][0])
                this-&gt;tiles[pos].tileVariant = 0;
            else if(adjacentTiles[1][28])
                this-&gt;tiles[pos].tileVariant = 0;
            else if(adjacentTiles[0][29])   
                this-&gt;tiles[pos].tileVariant = 1;
            else if(adjacentTiles[2][30])
                this-&gt;tiles[pos].tileVariant = 1;
        }
    }

    return;
}</code></pre>

<p>As an overview, <code>updateDirection</code> iterates over every <code>Tile</code>. It then builds an array of all the adjacent tiles, setting each element to <code>true</code> if the <code>Tile</code> is of the same type as the centre <code>Tile</code>, and <code>false</code> otherwise. Finally the <code>adjacentTiles</code> array is checked to see the configuration of its <code>true</code>/<code>false</code> values, and the <code>tileVariant</code> of the <code>Tile</code> is set accordingly. The order of the checks here is important, as we are only checking for <code>true</code> elements and not <code>false</code>; some combinations exist that would override others.</p>

<p>For example, a crossroads would appear as a corner tile if you checked for the corner tile first. You could make this more programmer friendly by defining <code>const</code> values for each direction combination, but it's just as simple to refer to this image (the highlighted edges are adjacent to a tile of the same type)</p>

<p><img src="http://www.binpress.com/images/uploads/35620/06-01.png" alt="The highlighted edges are the ones where tiles are adjacent" /></p>

<p>We now go from long and boring to short and interesting, with our <code>depthfirstsearch</code> function. If you've used such an algorithm before you can skip over this bit, but at least look at the code! If not, it's time to explain a 'proper' algorithm. As we discussed a while back, we want our industrial zones to dig material from the ground and then ship it to commercial zones where it can be sold. They can't just send the material to any zone though, they would need to be connected using roads (or another zone). To do this we need to check if there is a path that only goes through adjacent zones or roads and that takes us from the industrial zone at the start to some other commercial zone.</p>

<p>We use something called a depth-first search to do this, which starts at a <code>Tile</code> and checks if we can go through it or not. If we can, it branches off to every adjacent <code>Tile</code>, checking again, before branching off, then checking again... it then stops when we find the <code>Tile</code> we can stop at. This is fine, but it isn't very efficient; we will have to check if every industrial zone is connected to every commercial zone! That's going to be extremely slow, and what's more we have to do it every new game day. One way of improving this would be to simply use a more efficient pathfinding algorithm, such as A*. That doesn't fix our problem though, we've still got far too many pairs of zones to check, especially in a large city.</p>

<p>Instead what we do is split the <code>Map</code> into regions (using the <code>regions</code> array from before). Each <code>Tile</code> will be labelled depending on what region it is in, where two <code>Tile</code>s are in the same region if there is a path (through zones or roads) between them. If we find all of those paths, we can just check which region each <code>Tile</code> is in instead of trying to find a path between them each time. (We don't care what the path is after all, only that one exists!) What's more, we only have to update the regions when those paths change; if a <code>Tile</code> is created or destroyed. That's exactly what <code>depthfirstsearch</code> and <code>findConnectingRegions</code> do, they split the <code>Map</code> into those regions.</p>

<p><img src="http://www.binpress.com/images/uploads/35620/06-02.gif" alt="Our region creating search in action; different colours are different regions" /></p>

<pre class="prettyprint"><code>void Map::depthfirstsearch(std::vector&lt;TileType&gt;&amp; whitelist,
    sf::Vector2i pos, int label, int regionType=0)
{
    if(pos.x &lt; 0 || pos.x &gt;= this-&gt;width) return;
    if(pos.y &lt; 0 || pos.y &gt;= this-&gt;height) return;
    if(this-&gt;tiles[pos.y*this-&gt;width+pos.x].regions[regionType] != 0) return;
    bool found = false;
    for(auto type : whitelist)
    {
        if(type == this-&gt;tiles[pos.y*this-&gt;width+pos.x].tileType)
        {
            found = true;
            break;
        }
    }
    if(!found) return;

    this-&gt;tiles[pos.y*this-&gt;width+pos.x].regions[regionType] = label;

    depthfirstsearch(whitelist, pos + sf::Vector2i(-1,  0), label, regionType);
    depthfirstsearch(whitelist, pos + sf::Vector2i(0 ,  1), label, regionType);
    depthfirstsearch(whitelist, pos + sf::Vector2i(1 ,  0), label, regionType);
    depthfirstsearch(whitelist, pos + sf::Vector2i(0 , -1), label, regionType);

    return;
}</code></pre>

<p>Let's examine how this function works. First we check to see if the supplied position is out of bounds of the <code>Map</code>. If it is, we <code>return</code>. We then check to see if the <code>Tile</code> has already received a region and hence has already been visited by the function. If it has, we <code>return</code>, as we don't want to go over the same <code>Tile</code> twice. If we did the function would never finish! We then check to see if the <code>Tile</code>'s <code>tileType</code> is present in <code>whitelist</code>. If it isn't, once again we <code>return</code>, otherwise we assign the <code>Tile</code> a region and call <code>depthfirstsearch</code> again 4 times, once for each adjacent tile.</p>

<p>Such a function that calls itself is called recursive, and so this is a recursive implementation of the depth-first search algorithm; there is also an iterative version, which uses <code>for</code> loops, but I find this one is much easier to understand! If you've been paying attention though, you'll have noticed that <code>depthfirstsearch</code> is a <code>private</code> function! We will use <code>findConnectingRegions</code> to actually start the search.</p>

<pre class="prettyprint"><code>void Map::findConnectedRegions(std::vector&lt;TileType&gt; whitelist, int regionType=0)
{
    int regions = 1;

    for(auto&amp; tile : this-&gt;tiles) tile.regions[regionType] = 0;

    for(int y = 0; y &lt; this-&gt;height; ++y)
    {
        for(int x = 0; x &lt; this-&gt;width; ++x)
        {
            bool found = false;
            for(auto type : whitelist)
            {
                if(type == this-&gt;tiles[y*this-&gt;width+x].tileType)
                {
                    found = true;
                    break;
                }
            }
            if(this-&gt;tiles[y*this-&gt;width+x].regions[regionType] == 0 &amp;&amp; found)
            {
                depthfirstsearch(whitelist, sf::Vector2i(x, y), regions++, regionType);
            }
        }
    }
    this-&gt;numRegions[regionType] = regions;
}</code></pre>

<p>Upon calling the function, we clear each <code>Tile</code>'s region to 0, and then we iterate over every <code>Tile</code>. Once again we check to see if the <code>tileType</code> is in the <code>whitelist</code>, and if it is and the <code>Tile</code> has not yet been assigned a region we call <code>depthfirstsearch</code> on that tile. Since <code>depthfirstsearch</code> only continues through <code>whitelist</code>ed <code>Tile</code>s, every call of <code>depthfirstsearch</code> will be for a new region! Therefore we just increment the <code>regions</code> variable after every call, and each isolated block of tiles will be assigned a different region.</p>

<p>All that's left is to try it out! Create a new <code>Map</code> in <code>GameStateEditor</code>, then either <code>load</code> it or fill it with random tiles using a <code>for</code> loop inside the constructor. Add a <code>map.draw</code> call in <code>draw</code> after we draw the background (note it's <code>map.draw(window, dt)</code> not <code>window.draw(map)</code>), then compile and run! Hopefully you should see a lovely, animated world.</p>

<p><img src="http://www.binpress.com/images/uploads/35620/06-03.png" alt="Beautiful!" /></p>

<p>Now that we've actually got some interesting things on the screen, this program is starting to look like a game! It's still completely non-interactive though, so let's change that by adding the ability to pan (move around) and zoom the camera. For this we will use a state variable (not a <code>GameState</code>, just a variable that will keep track of what the player is doing) called <code>actionState</code>. First then, let's add this and some other variables to <code>GameStateEditor</code>.</p>

<pre class="prettyprint"><code>#include &lt;SFML/System.hpp&gt;

#include &quot;game_state.hpp&quot;
#include &quot;map.hpp&quot;

enum class ActionState { NONE, PANNING };

class GameStateEditor : public GameState
{
    private:

    ActionState actionState;

    sf::View gameView;
    sf::View guiView;

    Map map;

    sf::Vector2i panningAnchor;
    float zoomLevel;</code></pre>

<p>We've used an <code>enum class</code> definition again to create the <code>ActionState</code> type; if <code>actionState == ActionState::PANNING</code> then the player is panning the camera, otherwise they are not. We don't need an entry for zooming, as zooming is not a continuous process and will only happen upon each turn of the mouse wheel. We then have the <code>panningAnchor</code> variable which will keep track of where we started panning.</p>

<p>Upon pressing the middle mouse button, <code>panningAnchor</code> will record the mouse position. Then as the mouse moves away from the <code>panningAnchor</code> and the middle mouse button is still held down, the world will move too. <code>zoomLevel</code> records how far zoomed in we are, and is increased and decreased as the player scrolls the mouse wheel forwards and backwards. We will double and halve <code>zoomLevel</code> in order to keep the world at a nice scale factor (computers love powers of 2). First let's initialize some variable inside of the <code>GameStateEditor</code> constructor.</p>

<pre class="prettyprint"><code>GameStateEditor::GameStateEditor(Game* game)
{
    this-&gt;game = game;
    sf::Vector2f pos = sf::Vector2f(this-&gt;game-&gt;window.getSize());
    this-&gt;guiView.setSize(pos);
    this-&gt;gameView.setSize(pos);
    pos *= 0.5f;
    this-&gt;guiView.setCenter(pos);
    this-&gt;gameView.setCenter(pos);

    map = Map(&quot;city_map.dat&quot;, 64, 64, game-&gt;tileAtlas);

    this-&gt;zoomLevel = 1.0f;

    /* Centre the camera on the map */
    sf::Vector2f centre(this-&gt;map.width, this-&gt;map.height*0.5);
    centre *= float(this-&gt;map.tileSize);
    gameView.setCenter(centre);

    this-&gt;actionState = ActionState::NONE;
}</code></pre>

<p>The new parts start below the <code>map</code> assignment; we initialize <code>zoomLevel</code>, set the <code>actionState</code>, and whilst we're here we also centre the camera on the <code>Map</code>. Forgive the British/American mix, I can't seem to default to &quot;center&quot;... We also need to update the <code>draw</code> function so that is uses the correct views. So far they've been the same and it hasn't mattered, but now that we are moving <code>gameView</code> around and zooming it in and out we need to make the distinction.</p>

<pre class="prettyprint"><code>void GameStateEditor::draw(const float dt)
{
    this-&gt;game-&gt;window.clear(sf::Color::Black);

    this-&gt;game-&gt;window.setView(this-&gt;guiView);
    this-&gt;game-&gt;window.draw(this-&gt;game-&gt;background);

    this-&gt;game-&gt;window.setView(this-&gt;gameView);
    map.draw(this-&gt;game-&gt;window, dt);

    return;
}</code></pre>

<p>We want the background to always be drawn in the same place, so we draw it on <code>guiView</code>, but the world is part of the game and so should be drawn to <code>gameView</code>. If you compile the code now you should see a nicely centred <code>Map</code> being displayed in front of <code>background</code>, which should expand as you resize the window whilst the <code>Map</code> stays in the same (relative) place.</p>

<p><img src="http://www.binpress.com/images/uploads/35620/06-04.png" alt="All nice and neat" /></p>

<p>Now we can add the actual panning and zooming code. This code should be placed as events inside of the <code>handleInput</code> function. The new events are</p>

<pre class="prettyprint"><code>case sf::Event::MouseMoved:
{
    /* Pan the camera */
    if(this-&gt;actionState == ActionState::PANNING)
    {
        sf::Vector2f pos = sf::Vector2f(sf::Mouse::getPosition(this-&gt;game-&gt;window) - this-&gt;panningAnchor);
        gameView.move(-1.0f * pos * this-&gt;zoomLevel);
        panningAnchor = sf::Mouse::getPosition(this-&gt;game-&gt;window);
    }
    break;
}
case sf::Event::MouseButtonPressed:
{
    /* Start panning */
    if(event.mouseButton.button == sf::Mouse::Middle)
    {
        if(this-&gt;actionState != ActionState::PANNING)
        {
            this-&gt;actionState = ActionState::PANNING;
            this-&gt;panningAnchor = sf::Mouse::getPosition(this-&gt;game-&gt;window);
        }
    }
    break;
}
case sf::Event::MouseButtonReleased:
{
    /* Stop panning */
    if(event.mouseButton.button == sf::Mouse::Middle)
    {
        this-&gt;actionState = ActionState::NONE;
    }
    break;
}
/* Zoom the view */
case sf::Event::MouseWheelMoved:
{
    if(event.mouseWheel.delta &lt; 0)
    {
        gameView.zoom(2.0f);
        zoomLevel *= 2.0f;
    }
    else
    {
        gameView.zoom(0.5f);
        zoomLevel *= 0.5f;
    }
    break;
}</code></pre>

<p>When the middle mouse button is pressed and the player is not already panning the camera (this is why we created <code>actionState</code>) we set the <code>panningAnchor</code> to the position of the mouse. This is a <em>screen</em> position, and has nothing to do with the views we created. We also set <code>actionState</code> so that the program knows that the player is panning.</p>

<p>When the middle mouse button is released, we set the <code>actionState</code> to <code>ActionState::NONE</code> so that the player is not panning anymore. If the mouse moves whilst the player is panning then we get the new position of the mouse and subtract the old position (the <code>panningAnchor</code>) from it. Since both positions are coordinates, we can interpet this as calculating the (mathematical) vector from the anchor to the mouse. We then move the <code>gameView</code> in the direction that vector points. </p>

<p>To get a nice pan, we want the <code>Map</code> to move exactly in sync with the mouse, so whatever pixel was underneath the mouse when the panning started will remain beneath the mouse throughout the pan. To achieve this we first reverse the direction of motion; if you stop to think about it, moving a camera to the right is the same as moving everything else to the left, but we want the view to follow the mouse like a sheet of paper or a physical map, and so we reverse this by multiply by -1. At a 1:1 screen to <code>gameView</code> scale ratio (when <code>zoomLevel</code> is 1) the view will follow the cursor perfectly. But if <code>zoomLevel</code> is 2 we have a 1:2 ratio and so we have to multiply however much the mouse has moved by the <code>zoomLevel</code> in order to get the ratio to 2:2 (which is the same as 1:1) and make everything move in sync.</p>

<p>Finally, when the mouse wheel is scrolled up (negative <code>delta</code>) we zoom the view by a factor of 2 and if the wheel is scrolled down we zoom the view by a factor of 0.5. Much simpler! Although try compiling and running the program, zooming in, and then resizing the window. See that the zoom level resets? Well it doesn't actually, <code>zoomLevel</code> remains the same and it's only the view that changes. This is obviously bad as <code>zoomLevel</code> stops being in sync with the actual zoom! If you try panning again you'll see how bad this is. We could fix this by just setting <code>zoomLevel = 1.0f</code> when the player resizes the view, but it's better to match the view with the <code>zoomLevel</code> instead of the other way around (it prevents suddening zoom reset, which looks weird). The <code>zoom</code> call is the new bit!</p>

<pre class="prettyprint"><code>/* Resize the window */
case sf::Event::Resized:
{
    gameView.setSize(event.size.width, event.size.height);
    gameView.zoom(zoomLevel);</code></pre>

<p>In the next tutorial we will add the ability to select tiles ready for bulldozing or building.</p>

<p><a href="https://github.com/Piepenguin1995/citybuilder/">Source code for this section</a></p>
		</div>
				<div class="related">
			<h2>Was this tutorial useful? Check out Action RPG Engine and Tutorial for iOS:</h2>
			<a class="thumb-link" href="app/action-rpg-engine-and-tutorial-for-ios/798"><img class="thumb" src="images/products/798/action-rpg-engine-and-tutorial-for-ios--thumb.png" alt="" /></a>
			<div class="summary"><p>Create your own RPG, RTS or action-adventure game. Includes a flexible RPG engine, complete example game project, a helpful ebook tutorial and a gigantic royalty-free art package.</p>
				<div class="rating"><span class="value-title" title="5"></span><ul title="Rating 5 out of 5"><li class="icon-star"></li><li class="icon-star"></li><li class="icon-star"></li><li class="icon-star"></li><li class="icon-star"></li></ul></div>			</div>
			<a class="button" href="app/action-rpg-engine-and-tutorial-for-ios/798">More <i class="icon-angle-right"></i></a>
		</div>
				<div class="series">
					<a class="next" href="tutorial/creating-a-city-building-game-with-sfml-part-7-tile-selection/129"><span class="book"></span> 
				<em>Creating a City Building Game with SFML Part 7: Tile Selection</em>
								<small>2 comments</small>
							</a>
						<a class="prev" href="tutorial/creating-a-city-building-game-with-sfml-part-5-the-game-world/127"><span class="book"></span> 
				<em>Creating a City Building Game with SFML Part 5: The Game World</em>
								<small>3 comments</small>
							</a>
						
		</div>			
				<form class="subscribe-form" method="post" action="newsletter/signup">
			<img class="subscribe-icon" src="images/icons/subscribe-big.png" />
			<h3>Get new tutorials delivered to your Inbox</h3>
			<p>New tutorials will be sent to your Inbox once a week. You can unsubscribe at any time.</p>
			
			<input name="name" placeholder="Full name" type="text" class="text" /><input name="email" placeholder="Email" type="text" class="text" />			<input type="hidden" name="tutorial_id" value="128" />
			<button type="submit" class="red-button icon-plane">Subscribe</button>
			
		</form>
		<div class="eoa-links">
			<a class="button floater" href="content/write-for-us"><i class="icon-pencil"></i>Write for us!</a>
			<a class="red-button" href="tutorials"><i class="icon-book-open"></i>More Tutorials</a>
		</div>
		<div class="social-buttons">
	<span class="share-link socialb"><a rel="nofollow" href="http://www.binpress.com/tutorial/creating-a-city-building-game-with-sfml-part-6-exploring-the-world/128?slk"><em class="icon-link-1"></em><span class="counter">Link</span></a>
		<input type="text" value="http://www.binpress.com/tutorial/creating-a-city-building-game-with-sfml-part-6-exploring-the-world/128" readonly="readonly" class="text" />
	</span>
	<a rel="nofollow" class="socialb facebook" href="https://www.facebook.com/sharer.php?u=http%3A%2F%2Fwww.binpress.com%2Ftutorial%2Fcreating-a-city-building-game-with-sfml-part-6-exploring-the-world%2F128&t=Creating+a+City+Building+Game+with+SFML+Part+6%3A+Exploring+the+World+-+Tutorial+-+" count-url="https%3A%2F%2Fwww.binpress.com%2Ftutorial%2Fcreating-a-city-building-game-with-sfml-part-6-exploring-the-world%2F128" target="_blank"><em class="icon-facebook"></em><span class="counter">Share</span></a>
	<a rel="nofollow" class="socialb twitter" href="https://twitter.com/intent/tweet?text=Creating+a+City+Building+Game+with+SFML+Part+6%3A+Exploring+the+World+-+Tutorial+-+&url=http%3A%2F%2Fwww.binpress.com%2Ftutorial%2Fcreating-a-city-building-game-with-sfml-part-6-exploring-the-world%2F128" count-url="https%3A%2F%2Fwww.binpress.com%2Ftutorial%2Fcreating-a-city-building-game-with-sfml-part-6-exploring-the-world%2F128"><em class="icon-twitter"></em><span class="counter">Tweet</span></a>
	
	<a rel="nofollow" class="socialb linkedin" href="http://www.linkedin.com/shareArticle?mini=true&url=http%3A%2F%2Fwww.binpress.com%2Ftutorial%2Fcreating-a-city-building-game-with-sfml-part-6-exploring-the-world%2F128&title=Creating+a+City+Building+Game+with+SFML+Part+6%3A+Exploring+the+WorldTutorial&source=Binpress" count-url="https%3A%2F%2Fwww.binpress.com%2Ftutorial%2Fcreating-a-city-building-game-with-sfml-part-6-exploring-the-world%2F128"><em class="icon-linkedin"></em><span class="counter">Share</span></a>

</div>		<div class="tutorial-comments">
	<a name="comments"></a>
	<h2>9 comments</h2>
	
		<div class="comment-form">
	
		<span class="avatar small"><img src="images/avatars/default-small.png" alt="" /></span>		
		<form method="post" action="tutorials/comment">
			<input type="hidden" name="return" value="tutorial/creating-a-city-building-game-with-sfml-part-6-exploring-the-world/128" />
			<input type="hidden" name="tutorial_id" value="128" />
			<input type="hidden" name="parent_id" />
			<input type="hidden" name="reply_to" />
			<textarea cols="50" rows="4" name="content"></textarea>
			<br />
			<div class="login">
	<small>Sign-in now</small>
	<a rel="nofollow" class="grey-button login-button" href="login?return=tutorial/creating-a-city-building-game-with-sfml-part-6-exploring-the-world/128">Sign-in</a>
</div>
<div class="register">
	<small>Or enter your name and Email</small>
	<input name="name" placeholder="Full name" type="text" class="text" />
	<input name="email" placeholder="Email" type="email" class="text" />	
	<span class="cld"><input type="text" name="cb875c" value="8c149a" /> <input type="text" name="a3429c" /></span></div>
<button type="submit">Send</button>
			
		</form>

	</div>

			
		<ul class="comments inline" data-action="tutorials/savecomment">
		<li id="comment327">
	<a name="comment327"></a>
	<div class="wrapper">
			
		
		<input type="hidden" name="comment_id" value="327" />
				<a name="comment327"></a>
				<span class="avatar small color0"><img src="https://www.gravatar.com/avatar/46ea399af0cc9d5bdbd7de7b0bdf378d?s=48&amp;d=https://www.binpress.com/images/avatars/default-empty.gif" alt="" /><span>VP</span></span>		<span class="author">Vivek Patel</span>
			
		
		<span class="time"><i class="icon-clock"></i>1 month ago</span>
				<blockquote class="comment">I'm getting a ton of errors within map.cpp, most of which are to do with the enum class TileType. It says "use of undefined type ''TileType". I've followed everything here</blockquote>
		
		
		<div class="actions">
						<a class="small-button grey-button reply icon-reply">Reply</a>
							
			<span class="right">
				<a class="icon-flag" rel="nofollow" href="app/flagcomment/id/327">Flag</a>
			</span>
		</div>
	</div>
		
	<ul class="replies">
		
		</ul>
	</li><li id="comment262">
	<a name="comment262"></a>
	<div class="wrapper">
			
		
		<input type="hidden" name="comment_id" value="262" />
				<a name="comment262"></a>
				<span class="avatar small color6"><img src="https://www.gravatar.com/avatar/548fe0b74667da275f9b10e194196567?s=48&amp;d=https://www.binpress.com/images/avatars/default-empty.gif" alt="" /><span>J</span></span>		<span class="author">Jonny</span>
			
		
		<span class="time"><i class="icon-clock"></i>10 months ago</span>
				<blockquote class="comment">I'm having trouble entering the map. If someone could post the actual code of how to build a randomly generated map that would be great</blockquote>
		
		
		<div class="actions">
						<a class="small-button grey-button reply icon-reply">Reply</a>
							
			<span class="right">
				<a class="icon-flag" rel="nofollow" href="app/flagcomment/id/262">Flag</a>
			</span>
		</div>
	</div>
		
	<ul class="replies">
		
		</ul>
	</li><li id="comment245">
	<a name="comment245"></a>
	<div class="wrapper">
			
		
		<input type="hidden" name="comment_id" value="245" />
				<a name="comment245"></a>
				<span class="avatar small color1"><img src="https://www.gravatar.com/avatar/094a103878da27d3c8189e37408344e1?s=48&amp;d=https://www.binpress.com/images/avatars/default-empty.gif" alt="" /><span>PC</span></span>		<span class="author">Phillip Chang</span>
			
		
		<span class="time"><i class="icon-clock"></i>11 months ago</span>
				<blockquote class="comment">It seems that there is an extreme delay (up to several seconds) when I try panning the map. Surprisingly, it doesn't have any interference with the game's FPS; the animations are played smoothly even while the delay is in place. Any solutions?
I'm currently using SFML 2.3 and VS 2013.</blockquote>
		
		
		<div class="actions">
						<a class="small-button grey-button reply icon-reply">Reply</a>
							
			<span class="right">
				<a class="icon-flag" rel="nofollow" href="app/flagcomment/id/245">Flag</a>
			</span>
		</div>
	</div>
		
	<ul class="replies">
		
		</ul>
	</li><li id="comment243">
	<a name="comment243"></a>
	<div class="wrapper">
			
		
		<input type="hidden" name="comment_id" value="243" />
				<a name="comment243"></a>
				<span class="avatar small color5"><img src="https://www.gravatar.com/avatar/a57450c5c89f9273a9332eafb7a08c0f?s=48&amp;d=https://www.binpress.com/images/avatars/default-empty.gif" alt="" /><span>HR</span></span>		<span class="author">Hunter Rohwer</span>
			
		
		<span class="time"><i class="icon-clock"></i>12 months ago</span>
				<blockquote class="comment">Nevermind on my last issue, I figured it out, however, when I try and open my game, the map doesn't appear, but it looks like everything else works just fine.</blockquote>
		
		
		<div class="actions">
						<a class="small-button grey-button reply icon-reply">Reply</a>
							
			<span class="right">
				<a class="icon-flag" rel="nofollow" href="app/flagcomment/id/243">Flag</a>
			</span>
		</div>
	</div>
		
	<ul class="replies">
		
		</ul>
	</li><li id="comment242">
	<a name="comment242"></a>
	<div class="wrapper">
			
		
		<input type="hidden" name="comment_id" value="242" />
				<a name="comment242"></a>
				<span class="avatar small color5"><img src="https://www.gravatar.com/avatar/a57450c5c89f9273a9332eafb7a08c0f?s=48&amp;d=https://www.binpress.com/images/avatars/default-empty.gif" alt="" /><span>HR</span></span>		<span class="author">Hunter Rohwer</span>
			
		
		<span class="time"><i class="icon-clock"></i>12 months ago</span>
				<blockquote class="comment">I keep getting an error that says "GameStateEditor" has no member "map"</blockquote>
		
		
		<div class="actions">
						<a class="small-button grey-button reply icon-reply">Reply</a>
							
			<span class="right">
				<a class="icon-flag" rel="nofollow" href="app/flagcomment/id/242">Flag</a>
			</span>
		</div>
	</div>
		
	<ul class="replies">
		
		</ul>
	</li><li id="comment236">
	<a name="comment236"></a>
	<div class="wrapper">
			
		
		<input type="hidden" name="comment_id" value="236" />
				<a name="comment236"></a>
				<span class="avatar small color4"><img src="https://www.gravatar.com/avatar/e00f37c16c74c0123ef21cd6cb7770d5?s=48&amp;d=https://www.binpress.com/images/avatars/default-empty.gif" alt="" /><span>J</span></span>		<span class="author">John</span>
			
		
		<span class="time"><i class="icon-clock"></i>1 year ago</span>
				<blockquote class="comment">im using Visual Studio 2013

I downloaded your city_map.dat. 
added this line into GameStateEditor constructor.
    	map = Map("city_map.dat", 64, 64, game->tileAtlas);

then this into GameStateEditor::draw
       this->map.draw(this->game->window, dt);

however, whenever i compile and run, it won't load "city_map.dat"
</blockquote>
		
		
		<div class="actions">
						<a class="small-button grey-button reply icon-reply">Reply</a>
							
			<span class="right">
				<a class="icon-flag" rel="nofollow" href="app/flagcomment/id/236">Flag</a>
			</span>
		</div>
	</div>
		
	<ul class="replies">
		
			<li id="comment284">
	<a name="comment284"></a>
	<div class="wrapper">
			
		
		<input type="hidden" name="comment_id" value="284" />
				<input type="hidden" name="parent_id" value="236" />
				<a name="comment284"></a>
				<span class="avatar small color5"><img src="https://www.gravatar.com/avatar/fd0533b4fcc6bc6df45d3696f57ade9c?s=48&amp;d=https://www.binpress.com/images/avatars/default-empty.gif" alt="" /><span>CG</span></span>		<span class="author">Christian Gold</span>
			
		
		<span class="time"><i class="icon-clock"></i>7 months ago</span>
				<blockquote class="comment">You need to press the "space" key as mentioned in chapter 2! You can find it in GameStateStart::handleInput(). 
else if (event.key.code == sf::Keyboard::Space) this->loadgame();
</blockquote>
		
		
		<div class="actions">
						<a class="small-button grey-button reply icon-reply">Reply</a>
							
			<span class="right">
				<a class="icon-flag" rel="nofollow" href="app/flagcomment/id/284/parent/236">Flag</a>
			</span>
		</div>
	</div>
	</li>		</ul>
	</li><li id="comment130">
	<a name="comment130"></a>
	<div class="wrapper">
			
		
		<input type="hidden" name="comment_id" value="130" />
				<a name="comment130"></a>
				<span class="avatar small color1"><img src="https://www.gravatar.com/avatar/196fbd142b1211dc77c7ca616de473c2?s=48&amp;d=https://www.binpress.com/images/avatars/default-empty.gif" alt="" /><span>EJ</span></span>		<span class="author">Emily Johnson</span>
			
		
		<span class="time"><i class="icon-clock"></i>2 years ago</span>
				<blockquote class="comment">just a note: the updateDirection function in this is wrong - copy the one from the source instead.</blockquote>
		
		
		<div class="actions">
						<a class="small-button grey-button reply icon-reply">Reply</a>
							
			<span class="right">
				<a class="icon-flag" rel="nofollow" href="app/flagcomment/id/130">Flag</a>
			</span>
		</div>
	</div>
		
	<ul class="replies">
		
			<li id="comment198">
	<a name="comment198"></a>
	<div class="wrapper">
			
		
		<input type="hidden" name="comment_id" value="198" />
				<input type="hidden" name="parent_id" value="130" />
				<a name="comment198"></a>
				<span class="avatar small color3"><img src="https://www.gravatar.com/avatar/7b332caf671ec38a19946f02c34c1e79?s=48&amp;d=https://www.binpress.com/images/avatars/default-empty.gif" alt="" /><span>A</span></span>		<span class="author">Alex</span>
			
		
		<span class="time"><i class="icon-clock"></i>1 year ago</span>
				<blockquote class="comment">Thank you very much, I had copied the function from the article and already got scared as soon as IntelliSense pointed out some errors. lol</blockquote>
		
		
		<div class="actions">
						<a class="small-button grey-button reply icon-reply">Reply</a>
							
			<span class="right">
				<a class="icon-flag" rel="nofollow" href="app/flagcomment/id/198/parent/130">Flag</a>
			</span>
		</div>
	</div>
	</li>		</ul>
	</li>		</ul>		
		
	</div>
	</div>	
		
</div>			<div class="clear" style="clear:both;"></div>
		</div>
		<div id="footer-push"></div>
	</div>
	<div id="footer">
	<div class="footer-top">
		<div class="width">
			<a href="content/about">About us</a>
			<a href="contact">Contact Us</a>
			<a href="page/terms">Terms & Conditions</a>
			<a href="page/privacy">Privacy Policy</a>
		</div>
	</div>
	<div class="width">

		<div class="col">
			<h3>Selling Digital Products</h3>
			<a href="features/store">Your Online Store</a>
			<a href="content/sell-software-online">Business Software</a>
			<a href="content/sell-games-online">Computer Games</a>
			<a href="content/sell-code-libraries">Source-Code Libraries</a>
			<a href="content/eu-vat-2015">EU VAT collection</a>
		</div>
		<div class="col">
			<h3>The Binpress Marketplace</h3>
			<a href="browse">Browse the marketplace</a>
			<a href="features/marketplace">Publish your products</a>
			<a href="content/guidelines">Publishing Guidelines</a>
			<a href="tutorials">Software Development Tutorials</a>
		</div>
		<div class="col">
			<h3>Learn More</h3>
			<a href="guides">Binpress Guides</a>
			<a href="blog">Blog</a>
			<a href="forum">Forum</a>
			<a href="content/faq">Frequently Asked Questions</a>
			<a href="dfp/start">Digital Fulfillment on your site</a>
		</div>

		<div class="social-profiles">
			<a class="icon-facebook social" href="https://www.facebook.com/binpress"></a>
			<a class="icon-twitter social" href="https://www.twitter.com/binpress"></a>
			<a class="icon-gplus social" href="https://plus.google.com/u/0/+Binpress/posts"></a>
			<a class="logo" href="/" title="Homepage - Binpress">Your own digital store</a>
		</div>

	</div>
</div>	<script type="text/javascript" src="//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
<script>!window.jQuery && document.write('<script src="js/jq/jquery.min.js"><\/script>')</script>
<script type="text/javascript" src="//ajax.googleapis.com/ajax/libs/jqueryui/1.11.2/jquery-ui.min.js"></script>
<script>!window.jQuery.ui && document.write('<script src="js/jq/jquery-ui.min.js"><\/script>')</script>
<script type="text/javascript" src="/min/?b=js&amp;v=f319ecf&amp;f=binpress.js,media.js"></script>
<script type="text/javascript" src="/min/?b=js&amp;v=f319ecf&amp;f=prettify/prettify.js,site/tutorials.js,site/comments.js"></script>
		<!-- begin olark code --><script data-cfasync="false" type='text/javascript'>/*{literal}<![CDATA[*/
		window.olark||(function(c){var f=window,d=document,l=f.location.protocol=="https:"?"https:":"http:",z=c.name,r="load";var nt=function(){f[z]=function(){(a.s=a.s||[]).push(arguments)};var a=f[z]._={},q=c.methods.length;while(q--){(function(n){f[z][n]=function(){f[z]("call",n,arguments)}})(c.methods[q])}a.l=c.loader;a.i=nt;a.p={0:+new Date};a.P=function(u){a.p[u]=new Date-a.p[0]};function s(){a.P(r);f[z](r)}f.addEventListener?f.addEventListener(r,s,false):f.attachEvent("on"+r,s);var ld=function(){function p(hd){hd="head";return["<",hd,"></",hd,"><",i,' onl' + 'oad="var d=',g,";d.getElementsByTagName('head')[0].",j,"(d.",h,"('script')).",k,"='",l,"//",a.l,"'",'"',"></",i,">"].join("")}var i="body",m=d[i];if(!m){return setTimeout(ld,100)}a.P(1);var j="appendChild",h="createElement",k="src",n=d[h]("div"),v=n[j](d[h](z)),b=d[h]("iframe"),g="document",e="domain",o;n.style.display="none";m.insertBefore(n,m.firstChild).id=z;b.frameBorder="0";b.id=z+"-loader";if(/MSIE[ ]+6/.test(navigator.userAgent)){b.src="javascript:false"}b.allowTransparency="true";v[j](b);try{b.contentWindow[g].open()}catch(w){c[e]=d[e];o="javascript:var d="+g+".open();d.domain='"+d.domain+"';";b[k]=o+"void(0);"}try{var t=b.contentWindow[g];t.write(p());t.close()}catch(x){b[k]=o+'d.write("'+p().replace(/"/g,String.fromCharCode(92)+'"')+'");d.close();'}a.P(2)};ld()};nt()})({loader: "static.olark.com/jsclient/loader0.js",name:"olark",methods:["configure","extend","declare","identify"]});
			/* custom configuration goes here (www.olark.com/documentation) */
			olark.identify('3407-350-10-2744');/*]]>{/literal}*/</script><noscript><a href="https://www.olark.com/site/3407-350-10-2744/contact" title="Contact us" target="_blank">Questions? Feedback?</a> powered by <a href="http://www.olark.com?welcome" title="Olark live chat software">Olark live chat software</a></noscript><!-- end olark code --><script type="text/javascript">olark('api.visitor.updateCustomFields',{"visit_id":"6541776"});</script><script type="text/javascript">
adroll_adv_id = "2RIEOSPSWNCFZOUITXIIM7";
adroll_pix_id = "X4QCHJ7ZUBFSTP7ACJ34TI";
(function () {
var oldonload = window.onload;
window.onload = function(){
   __adroll_loaded=true;
   var scr = document.createElement("script");
   var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
   scr.setAttribute('async', 'true');
   scr.type = "text/javascript";
   scr.src = host + "/j/roundtrip.js";
   ((document.getElementsByTagName('head') || [null])[0] ||
    document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
   if(oldonload){oldonload()}};
}());
</script>
<script type="text/javascript">
  maxmind_user_id = "62188";
  (function() {
    var mt = document.createElement('script'); mt.type = 'text/javascript'; mt.async = true;
    mt.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + 'device.maxmind.com/js/device.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(mt, s);
  })();
</script>
<script type="text/javascript">if(!NREUMQ.f){NREUMQ.f=function(){NREUMQ.push(["load",new Date().getTime()]);var e=document.createElement("script");e.type="text/javascript";e.src=(("http:"===document.location.protocol)?"http:":"https:")+"//"+"js-agent.newrelic.com/nr-100.js";document.body.appendChild(e);if(NREUMQ.a)NREUMQ.a();};NREUMQ.a=window.onload;window.onload=NREUMQ.f;};NREUMQ.push(["nrfj","bam.nr-data.net","7d8608a34f","3053298","YFdVYEsAVxdYAhAICVkddldNCFYKFhINFQMYRkJAVhNQBVUSSxMDVlY=",0,124,new Date().getTime(),"","","","",""]);</script></body>
</html>